/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserInputsRouteImport } from './routes/user-inputs'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as OnboardingRouteImport } from './routes/onboarding'
import { Route as MaterialFlowTracerRouteImport } from './routes/material-flow-tracer'
import { Route as MarketplaceRouteImport } from './routes/marketplace'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InventoryTrackerRouteImport } from './routes/inventory-tracker'
import { Route as GreenCertificationsRouteImport } from './routes/green-certifications'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MaterialIndexRouteImport } from './routes/material/index'
import { Route as MaterialNewRouteImport } from './routes/material/new'
import { Route as MaterialBatchIdRouteImport } from './routes/material/$batchId'
import { Route as InsetsProjectIdRouteImport } from './routes/insets/$projectId'

const UserInputsRoute = UserInputsRouteImport.update({
  id: '/user-inputs',
  path: '/user-inputs',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingRoute = OnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const MaterialFlowTracerRoute = MaterialFlowTracerRouteImport.update({
  id: '/material-flow-tracer',
  path: '/material-flow-tracer',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketplaceRoute = MarketplaceRouteImport.update({
  id: '/marketplace',
  path: '/marketplace',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InventoryTrackerRoute = InventoryTrackerRouteImport.update({
  id: '/inventory-tracker',
  path: '/inventory-tracker',
  getParentRoute: () => rootRouteImport,
} as any)
const GreenCertificationsRoute = GreenCertificationsRouteImport.update({
  id: '/green-certifications',
  path: '/green-certifications',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MaterialIndexRoute = MaterialIndexRouteImport.update({
  id: '/material/',
  path: '/material/',
  getParentRoute: () => rootRouteImport,
} as any)
const MaterialNewRoute = MaterialNewRouteImport.update({
  id: '/material/new',
  path: '/material/new',
  getParentRoute: () => rootRouteImport,
} as any)
const MaterialBatchIdRoute = MaterialBatchIdRouteImport.update({
  id: '/material/$batchId',
  path: '/material/$batchId',
  getParentRoute: () => rootRouteImport,
} as any)
const InsetsProjectIdRoute = InsetsProjectIdRouteImport.update({
  id: '/insets/$projectId',
  path: '/insets/$projectId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/green-certifications': typeof GreenCertificationsRoute
  '/inventory-tracker': typeof InventoryTrackerRoute
  '/login': typeof LoginRoute
  '/marketplace': typeof MarketplaceRoute
  '/material-flow-tracer': typeof MaterialFlowTracerRoute
  '/onboarding': typeof OnboardingRoute
  '/register': typeof RegisterRoute
  '/user-inputs': typeof UserInputsRoute
  '/insets/$projectId': typeof InsetsProjectIdRoute
  '/material/$batchId': typeof MaterialBatchIdRoute
  '/material/new': typeof MaterialNewRoute
  '/material': typeof MaterialIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/green-certifications': typeof GreenCertificationsRoute
  '/inventory-tracker': typeof InventoryTrackerRoute
  '/login': typeof LoginRoute
  '/marketplace': typeof MarketplaceRoute
  '/material-flow-tracer': typeof MaterialFlowTracerRoute
  '/onboarding': typeof OnboardingRoute
  '/register': typeof RegisterRoute
  '/user-inputs': typeof UserInputsRoute
  '/insets/$projectId': typeof InsetsProjectIdRoute
  '/material/$batchId': typeof MaterialBatchIdRoute
  '/material/new': typeof MaterialNewRoute
  '/material': typeof MaterialIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/green-certifications': typeof GreenCertificationsRoute
  '/inventory-tracker': typeof InventoryTrackerRoute
  '/login': typeof LoginRoute
  '/marketplace': typeof MarketplaceRoute
  '/material-flow-tracer': typeof MaterialFlowTracerRoute
  '/onboarding': typeof OnboardingRoute
  '/register': typeof RegisterRoute
  '/user-inputs': typeof UserInputsRoute
  '/insets/$projectId': typeof InsetsProjectIdRoute
  '/material/$batchId': typeof MaterialBatchIdRoute
  '/material/new': typeof MaterialNewRoute
  '/material/': typeof MaterialIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/green-certifications'
    | '/inventory-tracker'
    | '/login'
    | '/marketplace'
    | '/material-flow-tracer'
    | '/onboarding'
    | '/register'
    | '/user-inputs'
    | '/insets/$projectId'
    | '/material/$batchId'
    | '/material/new'
    | '/material'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/green-certifications'
    | '/inventory-tracker'
    | '/login'
    | '/marketplace'
    | '/material-flow-tracer'
    | '/onboarding'
    | '/register'
    | '/user-inputs'
    | '/insets/$projectId'
    | '/material/$batchId'
    | '/material/new'
    | '/material'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/green-certifications'
    | '/inventory-tracker'
    | '/login'
    | '/marketplace'
    | '/material-flow-tracer'
    | '/onboarding'
    | '/register'
    | '/user-inputs'
    | '/insets/$projectId'
    | '/material/$batchId'
    | '/material/new'
    | '/material/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  GreenCertificationsRoute: typeof GreenCertificationsRoute
  InventoryTrackerRoute: typeof InventoryTrackerRoute
  LoginRoute: typeof LoginRoute
  MarketplaceRoute: typeof MarketplaceRoute
  MaterialFlowTracerRoute: typeof MaterialFlowTracerRoute
  OnboardingRoute: typeof OnboardingRoute
  RegisterRoute: typeof RegisterRoute
  UserInputsRoute: typeof UserInputsRoute
  InsetsProjectIdRoute: typeof InsetsProjectIdRoute
  MaterialBatchIdRoute: typeof MaterialBatchIdRoute
  MaterialNewRoute: typeof MaterialNewRoute
  MaterialIndexRoute: typeof MaterialIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user-inputs': {
      id: '/user-inputs'
      path: '/user-inputs'
      fullPath: '/user-inputs'
      preLoaderRoute: typeof UserInputsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/material-flow-tracer': {
      id: '/material-flow-tracer'
      path: '/material-flow-tracer'
      fullPath: '/material-flow-tracer'
      preLoaderRoute: typeof MaterialFlowTracerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/marketplace': {
      id: '/marketplace'
      path: '/marketplace'
      fullPath: '/marketplace'
      preLoaderRoute: typeof MarketplaceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inventory-tracker': {
      id: '/inventory-tracker'
      path: '/inventory-tracker'
      fullPath: '/inventory-tracker'
      preLoaderRoute: typeof InventoryTrackerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/green-certifications': {
      id: '/green-certifications'
      path: '/green-certifications'
      fullPath: '/green-certifications'
      preLoaderRoute: typeof GreenCertificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/material/': {
      id: '/material/'
      path: '/material'
      fullPath: '/material'
      preLoaderRoute: typeof MaterialIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/material/new': {
      id: '/material/new'
      path: '/material/new'
      fullPath: '/material/new'
      preLoaderRoute: typeof MaterialNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/material/$batchId': {
      id: '/material/$batchId'
      path: '/material/$batchId'
      fullPath: '/material/$batchId'
      preLoaderRoute: typeof MaterialBatchIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/insets/$projectId': {
      id: '/insets/$projectId'
      path: '/insets/$projectId'
      fullPath: '/insets/$projectId'
      preLoaderRoute: typeof InsetsProjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  GreenCertificationsRoute: GreenCertificationsRoute,
  InventoryTrackerRoute: InventoryTrackerRoute,
  LoginRoute: LoginRoute,
  MarketplaceRoute: MarketplaceRoute,
  MaterialFlowTracerRoute: MaterialFlowTracerRoute,
  OnboardingRoute: OnboardingRoute,
  RegisterRoute: RegisterRoute,
  UserInputsRoute: UserInputsRoute,
  InsetsProjectIdRoute: InsetsProjectIdRoute,
  MaterialBatchIdRoute: MaterialBatchIdRoute,
  MaterialNewRoute: MaterialNewRoute,
  MaterialIndexRoute: MaterialIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
